#!/bin/bash

do_usage () {
cat >&2 <<EOF
Usage: $0 -i input-stream -o rtmp-output-url-prefix -v src-video-stream-id
    -a src-audio-stream-id[:audio-channel] -f ffmpeg-encoding-options-renditions-file [OPTIONS]

FFmpeg wrapper script for live transcoding and RTMP streaming (ABR-oriented multiple output)

Mandatory arguments to long options are mandatory for short options too.

Required parameters:
  -i, --input=input-stream	input stream
  -o, --output=rtmp-output-url-prefix
				RTMP output URL prefix
  -v, --videosrc=src=stream-id	Source video stream selector
  -a, --audiosrc=src-stream-id[:audio-channel]
				Source audio stream and channel selector
				If specified, the selected channel is duplicated to stereo output
				using a pan audio filter.
Optional parameters:
  -c, --crop=pix-x:pix-y:offset-x,offset-y
				Image crop filter dimensions and offsets
  -k, --keyint=seconds		Imposed (hard) keyframe interval (Default: 4) for all renditions
  -f, --ffopts-file=file	Read FFmpeg encoding parameters from this file
				This is a bash script that must specify:
				RENDITIONS array containing strings for identifying each output stream.
				The members of this array are used as keys for the other options.
				They are also appended to the output prefix to derive the RTMP URL for
				each rendition.
				FFVENC_key: FFmpeg video encoding parameters for this rendition
				FFAENC_key: FFmpeg audio encoding parameters for this rendition
				or
				FFAENC_COMMON: FFmpeg audio encoding parameters common for all
				renditions (required if --audiobargraph=o is used)
				FFSCALE: associative array specifying image scale dimensions per
				rendition (output SAR hardcoded to 1:1)
				FFDEINTERLACE: associative array specifying deinterlace filter per
				rendition
  -j, --snap-prefix=path	For each rendition, take a snapshot every 5 seconds and write it to a
				file derived by appending the rendition key to this path
  -b, --audiobargraph=i[nput]/o[utput]/r[aw][:tcp-port:silence-threshold:report-volume:ip-address]
				Pipe to VLC with Audio Bar Graph filter for audio monitoring
				i/o/r: output audio: same as input (copy), same as output or raw
				(FFAENC_COMMON is required for --audiobargraph=o)
				tcp-port: direct ABG output to this port (default: 6514)
				silence-threshold: float (default: 0.01)
				report-volume: integer (default: 0)
				ip-address: Direct ABG output to this (IPv4) address (default:
				127.0.0.1)
  -p, --pidfile			Write FFmpeg PID to this file
  -l, --syslog[=facility.level] Redirect FFmpeg standard error to syslog, optionally using specified
				facility and level (default: daemon.notice)
  -d, --daemon			Run FFmpeg as a daemon

EOF
}

daemonize=false
declare -A opts;

test_getopt="$(getopt -T)"
if [ $? -eq 4 -a -z "$test_getopt" ]; then
    getopt_flavor=1
else
    SCRIPTDIR="$(cd "${0%/*}" 2>/dev/null && pwd -P)"
    if [ $? -ne 0 ]; then
	echo "could not cd to ${0%/*}, SCRIPTDIR may be wrong" >&2;
	SCRIPTDIR="${0/*}"
    fi
    getopt_src=$(which getopts_long.sh || echo "${SCRIPTDIR}/getopts_long.sh")
    if [ -f "${getopt_src}" -a -r "${getopt_src}" ]; then
	. "${getopt_src}"
	if declare -f getopts_long >/dev/null; then
	    getopt_flavor=2
	fi
    fi
fi

if [ -z "$getopt_flavor" ]; then
    echo "either getopt(1) from util-linux or getopts_long.sh is required, but none was found" >&2
    exit 1
fi

if [ $getopt_flavor -eq 1 ]; then
    params="$(getopt -o i:o:c:k:f:a:v:l::j:b:p:dh \
		-l input:,output:,crop:,keyint: \
		-l ffopts-file:,audiosrc:,videosrc: \
		-l snap-prefix:,audiobargraph:,pidfile: \
		-l syslog::,daemon,help -n "$0" -- "$@")"

    #declare -p params
    eval set -- "$params"

    while true; do
	case "$1" in
	    -h|--help)
		do_usage
		exit 0
		;;
	    -i|--input)
		opts[input]="$2"
		shift 2
		;;
	    -o|--output)
		opts[outputprefix]="$2"
		shift 2
		;;
	    -c|--crop)
		opts[crop]="$2"
		shift 2
		;;
	    -k|--keyint)
		opts[keyint]="$2"
		shift 2
		;;
	    -f|--ffopts-file)
		opts[ffparams]="$2"
		shift 2
		;;
	    -a|--audiosrc)
		opts[audiosrc]="$2"
		shift 2
		;;
	    -v|--videosrc)
		opts[videosrc]="$2"
		shift 2
		;;
	    -j|--snap-prefix)
		opts[snapfileprefix]="$2"
		shift 2
		;;
	    -b|--audiobargraph)
		opts[audiobargraph]="$2"
		shift 2
		;;
	    -p|--pidfile)
		opts[pidfile]="$2"
		shift 2
		;;
	    -l|--syslog)
		opts[syslog]="${2:-daemon.notice}"
		shift 2
		;;
	    -d|--daemon)
		daemonize=true
		shift
		;;
	    --)
		shift
		break
		;;
	    *)
		do_usage
		exit 1
		;;
	esac
    done
elif [ $getopt_flavor -eq 2 ]; then
    OPTLIND=1
    while getopts_long i:o:c:k:f:a:v:l::j:b:p:dh opt \
	input 1 output 1 crop 1 keyint 1 \
	ffopts-file 1 audiosrc 1 videosrc 1 \
	snap-prefix 1 audiobargraph 1 pidfile 1 \
	syslog 2 daemon 0 help 0 \
	"" "$@"
    do
	case "$opt" in
	    h|help)
		do_usage
		exit 0
		;;
	    i|input)
		opts[input]="$OPTLARG"
		;;
	    o|output)
		opts[outputprefix]="$OPTLARG"
		;;
	    c|crop)
		opts[crop]="$OPTLARG"
		;;
	    k|keyint)
		opts[keyint]="$OPTLARG"
		;;
	    f|ffopts-file)
		opts[ffparams]="$OPTLARG"
		;;
	    a|audiosrc)
		opts[audiosrc]="$OPTLARG"
		;;
	    v|videosrc)
		opts[videosrc]="$OPTLARG"
		;;
	    j|snap-prefix)
		opts[snapfileprefix]="$OPTLARG"
		;;
	    b|audiobargraph)
		opts[audiobargraph]="$OPTLARG"
		;;
	    p|pidfile)
		opts[pidfile]="$OPTLARG"
		;;
	    l|syslog)
		opts[syslog]="${OPTLARG:-daemon.notice}"
		;;
	    d|daemon)
		daemonize=true
		;;
	    ?)
		do_usage
		exit 1
		;;
	esac
    done
fi

ffinput="${opts[input]}"
test -n "${ffinput}" || { do_usage; exit 1; }
ffoutputprefix="${opts[outputprefix]}"
test -n "${ffoutputprefix}" || { do_usage; exit 1; }
#ffsnapfile="${opts[snapfile]:=/tmp/${ffoutput##*/}.jpg}"
ffsnapfileprefix="${opts[snapfileprefix]}"
ffsyslog="${opts[syslog]}"
ffpidfile="${opts[pidfile]:=/tmp/ffmpeg.${ffoutputprefix##*/}.pid}"
vlcpidpath="${ffpidfile%/*}"
vlcpidfile="${ffpidfile##*/}"
vlcpidfile="${vlcpidpath}/vlc.${vlcpidfile#ffmpeg.}"

OLDIFS="$IFS"
IFS=:
ffvideosrc=(${opts[videosrc]})
IFS="$OLDIFS"
unset OLDIFS
if [ ${#ffvideosrc[@]} -eq 1 ]; then
    ffmap_video="0:${ffvideosrc[0]}"
else
    do_usage
    exit 1
fi

OLDIFS="$IFS"
IFS=:
ffaudiosrc=(${opts[audiosrc]})
IFS="$OLDIFS"
unset OLDIFS
if [ ${#ffaudiosrc[@]} -eq 2 ]; then
    fffilter_audio="[0:${ffaudiosrc[0]}]pan=stereo:c0=c${ffaudiosrc[1]}:c1=c${ffaudiosrc[1]}[pa]"
    ffmap_audio="[pa]"
elif [ ${#ffaudiosrc[@]} -eq 1 ]; then
    ffmap_audio="0:${ffaudiosrc[0]}"
else
    do_usage
    exit 1
fi

ffkeyframes="expr:gte(t,n_forced*${opts[keyint]:=4})"

if [ -n "${opts[ffparams]}" -a -f "${opts[ffparams]}" -a -r "${opts[ffparams]}" ]; then
    . "${opts[ffparams]}"
else
    do_usage
    exit 1
fi

if [ "${#RENDITIONS[@]}" -eq 0 ]; then
    echo "RENDITIONS not specified in ffmpeg-encode-renditions-params-file" >&2
    exit 1
fi
FFOPTS=(-nostats -nostdin -y -re -i "${ffinput}")
for rendition in "${RENDITIONS[@]}"; do
    fffilter_video_deint="${FFDEINTERLACE[rendition]}${FFDEINTERLACE[rendition]:+,}"
    fffilter_video="${opts[crop]:+crop=}${opts[crop]}${opts[crop]:+,}"
    if [ -n "${FFSCALE[rendition]}" ]; then
	fffilter_video+="scale=${FFSCALE[rendition]},"
    else
	echo "$0: FFSCALE must be specified for each rendition" >&2
	exit 1
    fi
    # hardcoded SAR 1:1
    fffilter_video+="setsar=1/1"

    # hack: get array by indirection
    FFVENC="FFVENC_${rendition}"[@]
    FFVENC=("${!FFVENC}")

    if [ ${#FFAENC_COMMON[@]} -ne 0 ]; then
	FFAENC=("${FFAENC_COMMON[@]}")
    else
	FFAENC="FFAENC_${rendition}"[@]
	FFAENC=("${!FFAENC}")
    fi

    FFOPTS+=(-filter:"${ffmap_video}" "${fffilter_video_deint}${fffilter_video}" "${FFVENC[@]}" -force_key_frames "${ffkeyframes}" ${fffilter_audio:+-filter_complex} "${fffilter_audio}" "${FFAENC[@]}" -map "${ffmap_video}" -map "${ffmap_audio}" -f flv "${ffoutputprefix}${rendition}")

    if [ -n "${ffsnapfileprefix}" ]; then
	FFOPTS+=(-f image2 -updatefirst 1 -filter:"${ffmap_video}" "fps=fps=1/5,${fffilter_video}" -map "${ffmap_video}" "${ffsnapfileprefix}${rendition}.jpg")
    fi
done


OLDIFS="$IFS"
IFS=:
ffabg=(${opts[audiobargraph]})
IFS="$OLDIFS"
unset OLDIFS
if [ ${#ffabg[@]} -ge 1 ]; then
    if [ "${ffabg[0]}" = i ]; then
	ffabg_what=(-f mpegts -c:a copy)
    elif [ "${ffabg[0]}" = o ]; then
	if [ ${#FFAENC_COMMON[@]} -eq 0 ]; then
	    echo "$0: -b o requires FAENC_COMMON" >&2
	    exit 1
	fi
	ffabg_what=(-f mpegts)
	ffabg_what+=("${FFAENC_COMMON[@]}")
    elif [ "${ffabg[0]}" = r ]; then
	ffabg_what=(-f nut -c:a pcm_s16le)
	# force vlc input format
	VLCOPTS+=(--ffmpeg-format=nut)
    else
	do_usage
	exit 1
    fi
    ffabg_what+=(-map "${ffmap_audio}" pipe:4)
fi
if [ ${#ffabg[@]} -eq 2 ]; then
    ffabg_port="${ffabg[1]}"
else
    ffabg_port=6514
fi
if [ ${#ffabg[@]} -ge 3 ]; then
    ffabg_threshold="${ffabg[2]}"
else
    ffabg_threshold=0.01
fi
if [ ${#ffabg[@]} -ge 4 ]; then
    ffabg_vol="${ffabg[3]}"
else
    ffabg_vol=0
fi
if [ ${#ffabg[@]} -ge 5 ]; then
    ffabg_addr="${ffabg[4]}"
else
    ffabg_addr=localhost
fi
if [ ${#ffabg[@]} -gt 5 ]; then
    do_usage
    exit 1
fi

vlc_audiobargraph () {
    vlc_abgfifo="$1"
    vlc -I dummy --ignore-config --daemon --pidfile="${vlcpidfile}" \
	--play-and-exit \
	--no-video --aout dummy \
	--audio-filter="audiobargraph_a" \
	--audiobargraph_a-address="${ffabg_addr}" \
	--audiobargraph_a-port="${ffabg_port}" \
	--audiobargraph_a-connection_reset=1 \
	--audiobargraph_a-bargraph="${ffabg_vol}" \
	--audiobargraph_a-bargraph_repetition=22 \
	--audiobargraph_a-silence=1 \
	--audiobargraph_a-repetition_time=1000 \
	--audiobargraph_a-time_window=10000 \
	--audiobargraph_a-alarm_threshold="${ffabg_threshold}" \
	"${VLCOPTS[@]}" \
	"${vlc_abgfifo}"
}

if [ ${#ffabg[@]} -ne 0 ]; then
    FFOPTS+=("${ffabg_what[@]}")
    if [ "${daemonize}" = true -o -n "${ffsyslog}" ]; then
	vlcsyslogfacility="${ffsyslog%.*}"
	VLCOPTS+=(--syslog --syslog-facility="${vlcsyslogfacility:-daemon}")
    fi
    ffabgfifo=$(mktemp -u "${vlcpidpath}/abgafifo.XXXXXXXXXX")
    mkfifo "$ffabgfifo"
    if [ $? -ne 0 ]; then
	exit 1
    fi
    vlc_audiobargraph "${ffabgfifo}"
    exec 4>"${ffabgfifo}"
fi

# no daemonize, no syslog
if [ "${daemonize}" != true -a -z "${ffsyslog}" ]; then
    echo /usr/bin/ffmpeg ${FFOPTS[@]:2}
    /usr/bin/ffmpeg ${FFOPTS[@]:2}
    RC=$?
    [ ${#ffabg[@]} -ne 0 ] && rm -f "${ffabgfifo}"
    exit $RC
fi

coproc /usr/bin/nohup /usr/bin/ffmpeg ${FFOPTS[@]} 2>&1

if [ $? -ne 0 ]; then
    exit 1
fi
FFPID=$COPROC_PID
touch "${ffpidfile}" && echo $FFPID > "${ffpidfile}"
if [ $? -ne 0 ]; then
    kill -TERM ${FFPID}
fi

# daemonize, (implicit) syslog
if [ "$daemonize" = true ]; then
    exec 3<&${COPROC[0]}
    {
	/usr/bin/logger -p "${ffsyslog:-daemon.notice}" -t "$(ps -p ${FFPID} -o comm=)[${FFPID}]"
	[ ${#ffabg[@]} -ne 0 ] && rm -f "${ffabgfifo}"
	rm -f "${ffpidfile}"
    } <&3 &
# no daemonize, explicit syslog
elif [ -n "${ffsyslog}" ]; then
    trap 'rm -f "${ffpidfile}"' HUP INT QUIT TERM KILL
    [ ${#ffabg[@]} -ne 0 ] && trap 'rm -f "${ffabgfifo}"' HUP INT QUIT TERM KILL
    /usr/bin/logger -p "${ffsyslog}" -t "$(ps -p ${FFPID} -o comm=)[${FFPID}]" <&${COPROC[0]}
    kill $$
fi
